name: CI

on:
  push:
    branches: [ "master" ]
  pull_request:
    branches: [ "master" ]

  workflow_dispatch:

jobs:
  BuildTesting:
    runs-on: ubuntu-24.04

    services:
      sqlserver:
        image: mcr.microsoft.com/mssql/server:2019-latest
        ports:
          - 1433:1433
        options: >-
          --accept-eula
          --env 'ACCEPT_EULA=Y'
          --env 'MSSQL_SA_PASSWORD=YourStrong!Passw0rd'
          --health-cmd "/opt/mssql-tools/bin/sqlcmd -U sa -P YourStrong!Passw0rd -Q \"SELECT 1\" -S localhost"
          --health-interval 10s
          --health-timeout 5s
          --health-retries 5
          --user root
    
    steps:
      - name: Verificando a instalação do Docker
        run: |
          docker --version
          docker info
    
      - name: Realizando a busca do código-fonte
        uses: actions/checkout@v4

      - name: Configurando a versão .NET do projeto
        uses: actions/setup-dotnet@v3
        with:
          dotnet-version: '8.0.x'

      - name: Instalando as dependências
        run: dotnet restore

      - name: Compilando o projeto
        run: dotnet build

      - name: Executando testes unitários
        run:  dotnet test ./FiapTechChallenge.Tests/FiapTechChallenge.Tests.csproj

      - name: Executando testes de integração
        run:  dotnet test ./FiapTechChallenge.IntegrationTests/FiapTechChallenge.IntegrationTests.csproj

      - name: Mensagem final
        run: echo Integração finalizada com sucesso

  DockerHub:
    runs-on: ubuntu-24.04
    
    steps:
      - name: Realizando a busca do código-fonte
        uses: actions/checkout@v4

      - name: Docker Login
        uses: docker/login-action@v3.3.0
        with:
         username: 'yssbento'
         password: ${{secrets.DOCKERHUB_PASSWORD}}

      - name: Build and push Docker images
        uses: docker/build-push-action@v6.10.0
        with:
          context: .
          tags: 'yssbento/fiaptechchallenge-fase02:latest'
          push: true
          
